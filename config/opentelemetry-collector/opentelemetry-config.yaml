receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: 'containerd-prometheus'
          scrape_interval: 1s
          static_configs:
            - targets: ['localhost:9323']
          metrics_path: /v1/metrics
          metric_relabel_configs:
            - source_labels: [namespace]
              regex: 'oakestra'
              action: keep

  hostmetrics:
    collection_interval: 1s
    #root_path: /
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
          system.cpu.logical.count:
            enabled: true
          system.cpu.physical.count:
            enabled: true
      memory:
      load:
        cpu_average: true
      network:
        include:
          interfaces: veth000g*
          match_type: regexp

  hostmetrics/process:
    collection_interval: 1s
    scrapers:
      process:
        metrics:
          process.disk.io:
            enabled: true
        include:
          names: containerd*
          match_type: regexp
        mute_process_name_error: true
        mute_process_io_error: true
        mute_process_exe_error: true
        mute_process_user_error: true
        mute_process_cgroup_error: true


  hostmetrics/disk:
    collection_interval: 30s
    #root_path: /
    scrapers:
      disk:
      filesystem:

  unixsocket:
    polling_interval: 2s


processors:
  metricstransform:
    transforms:
      - include: ^container_cpu_(?P<state>.*)_usec_microseconds$
        match_type: regexp
        action: combine
        new_name: container.cpu.time
        submatch_case: lower
      - include: ^container_memory_(?P<state>.*)_bytes
        match_type: regexp
        action: combine
        new_name: container.memory.usage
        submatch_case: lower
      - include: ^container_memory_oom_total
        match_type: regexp
        action: update
        new_name: container.memory.oom
        submatch_case: lower
      - include: (.*).cpu.*
        match_type: regexp
        action: update
        operations:
          - action: aggregate_labels
            label_set: [ state ]
            aggregation_type: sum
      - include: (.*).memory.*
        match_type: regexp
        action: update
        operations:
          - action: aggregate_labels
            label_set: [ state ]
            aggregation_type: sum
          - action: update_label
            label: state
            value_actions:
              - value: usage
                new_value: used

  groupbyattrs:
    keys:
      - container_id
      - namespace

  batch:
    timeout: 1s

  filter:
    metrics:
      metric:
        - IsMatch(resource.attributes["process.command_line"], ".*-namespace moby.*")

  resource:
    attributes:
      - key: machine
        value: &id monitoring-agent
        action: upsert

  transform:
    error_mode: ignore
    metric_statements:
      - context: metric
        statements:
          - convert_gauge_to_sum("cumulative", true)

exporters:

  debug:
    verbosity: normal

  mqtt:
    interval: 1s
    client_id: *id
    broker:
      host: 127.0.0.1
      port: 1883

service:
  telemetry:
    metrics:
      level: none
  pipelines:
    metrics:
      receivers: [unixsocket, prometheus, hostmetrics]
      processors: [filter, resource, groupbyattrs, metricstransform, transform, batch]
      exporters: [debug, mqtt]
